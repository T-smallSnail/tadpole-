<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd"
	default-lazy-init="true">

    <!--引入配置文件-->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties" />
    
    <!--配置 jedis pool-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大连接数 -->
        <property name="maxTotal" value="${redis.cluster.pool.maxTotal}"/>
        <!-- 最大空闲时间 -->
        <property name="maxIdle" value="${redis.cluster.pool.maxIdle}"/>
        <!-- 最小空闲时间 -->
        <property name="minIdle" value="${redis.cluster.pool.minIdle}"/>
        <!-- 每次最大连接数 -->
        <property name="numTestsPerEvictionRun" value="${redis.cluster.pool.numTestsPerEvictionRun}"/>
        <!-- 释放扫描的扫描间隔 -->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.cluster.pool.timeBetweenEvictionRunsMillis}"/>
        <!-- 连接的最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="${redis.cluster.pool.minEvictableIdleTimeMillis}"/>
        <!-- 连接控歘按时间多久后释放，当空闲时间>该值且空闲连接>最大空闲连接数时直接释放 -->
        <property name="softMinEvictableIdleTimeMillis" value="${redis.cluster.pool.softMinEvictableIdleTimeMillis}"/>
        <!-- 获得链接时的最大等待毫秒数，小于0：阻塞不确定时间，默认-1 -->
        <property name="maxWaitMillis" value="${redis.cluster.pool.maxWaitMillis}"/>
        <!-- 在获得链接的时候检查有效性，默认false -->
        <property name="testOnBorrow" value="${redis.cluster.pool.testOnBorrow}"/>
        <!-- 在空闲时检查有效性，默认false -->
        <property name="testWhileIdle" value="${redis.cluster.pool.testWhileIdle}"/>
        <!-- 连接耗尽时是否阻塞，false报异常，true阻塞超时 默认：true-->
        <property name="blockWhenExhausted" value="${redis.cluster.pool.blockWhenExhausted}"/>
        <!-- 启动jmx：true-->
        <property name="jmxEnabled" value="${redis.cluster.pool.jmxEnabled}"/>
    </bean>

    <!--配置RedisClusterConfiguration-->
    <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="${redis.cluster.maxRedirects}"></property>
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="${redis.cluster.host1}" />  
                    <constructor-arg name="port" value="${redis.cluster.port1}" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="${redis.cluster.host1}" />  
                    <constructor-arg name="port" value="${redis.cluster.port2}" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode ">  
                    <constructor-arg name="host" value="${redis.cluster.host2}" />  
                    <constructor-arg name="port" value="${redis.cluster.port1}" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="${redis.cluster.host2}" />  
                    <constructor-arg name="port" value="${redis.cluster.port2}" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host" value="${redis.cluster.host3}" />  
                    <constructor-arg name="port" value="${redis.cluster.port1}" />  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode ">  
                    <constructor-arg name="host" value="${redis.cluster.host3}" />  
                    <constructor-arg name="port" value="${redis.cluster.port2}" />  
                </bean>  
            </set>
        </property>
    </bean>

    <!--配置JedisConnectionFactory-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/>
    </bean>

    <!--redisTemplate-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
         <property name="keySerializer">  
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
	    </property>
    </bean>
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory" /> 
        <property name="keySerializer">  
	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
	    </property>
    </bean>
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg index="0" ref="redisTemplate"  />
    </bean>
    <bean id="keyGenerator" class="com.thinkgem.jeesite.common.utils.CacheKeyGenerator" />
</beans>